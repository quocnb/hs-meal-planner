type: edu
files:
  - name: src/mealplanner/Main.java
    visible: true
    text: |-
      package mealplanner;
      
      public class Main {
        public static void main(String[] args) {
          System.out.println("Hello World!");
        }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      repositories {
          mavenCentral()
      }
      
      dependencies {
          implementation 'org.postgresql:postgresql:42.2.27'
      }
    learner_created: false
  - name: test/MealPlannerTests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.io.File;
      import java.sql.*;
      import java.util.*;
      
      class Column {
        public String first;
        public String second;
      
        public Column(String first, String second) {
          this.first = first;
          this.second = second;
        }
      
        @Override
        public boolean equals(Object o) {
          if (this == o) return true;
          if (o == null || getClass() != o.getClass()) return false;
          Column column = (Column) o;
          return Objects.equals(first, column.first) && Objects.equals(second, column.second);
        }
      
        @Override
        public int hashCode() {
          return Objects.hash(first, second);
        }
      }
      
      class dbTable {
        String name;
        List<Column> columnNameType;
      
        public dbTable(String name, List<Column> columnNameType) {
          this.name = name;
          this.columnNameType = columnNameType;
        }
      }
      
      class MyMealTestData {
        String mealCategory;
        String mealName;
        String[] ingredients;
      
        MyMealTestData(String mealCategory, String mealName, String[] ingredients) {
          this.mealCategory = mealCategory;
          this.mealName = mealName;
          this.ingredients = ingredients;
        }
      }
      
      public class MealPlannerTests extends StageTest {
      
        static final String DB_URL = "jdbc:postgresql:meals_db";
        static final String USER = "postgres";
        static final String PASS = "1111";
      
        String[] days = new String[]{"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
      
        static final MyMealTestData[] mealsList = new MyMealTestData[]{
                new MyMealTestData("breakfast", "scrambled eggs", new String[]{"eggs", "milk", "cheese"}),
                new MyMealTestData("breakfast", "sandwich", new String[]{"bread", "cheese", "ham"}),
                new MyMealTestData("breakfast", "oatmeal", new String[]{"oats", "milk", "banana", "peanut butter"}),
                new MyMealTestData("breakfast", "english breakfast", new String[]{"eggs", "sausages", "bacon", "tomatoes",
                        "bread"}),
                new MyMealTestData("lunch", "sushi", new String[]{"salmon", "rice", "avocado"}),
                new MyMealTestData("lunch", "chicken salad", new String[]{"chicken", "lettuce", "tomato", "olives"}),
                new MyMealTestData("lunch", "omelette", new String[]{"eggs", "milk", "cheese"}),
                new MyMealTestData("lunch", "salad", new String[]{"lettuce", "tomato", "onion", "cheese", "olives"}),
                new MyMealTestData("dinner", "pumpkin soup", new String[]{"pumpkin", "coconut milk", "curry", "carrots"}),
                new MyMealTestData("dinner", "beef steak", new String[]{"beef steak"}),
                new MyMealTestData("dinner", "pizza", new String[]{"flour", "tomato", "cheese", "salami"}),
                new MyMealTestData("dinner", "tomato soup", new String[]{"tomato", "orzo"})
        };
      
        void checkTableSchema(List<dbTable> tables) {
          try {
            Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);
            DatabaseMetaData meta = connection.getMetaData();
            for (dbTable table : tables) {
              ResultSet tableMeta = meta.getTables(null, null, table.name, null);
              if (!tableMeta.next() || !table.name.equalsIgnoreCase(tableMeta.getString("TABLE_NAME"))) {
                throw new WrongAnswer("The table \"" + table.name + "\" doesn't exist.");
              }
              ResultSet columns = meta.getColumns(null, null, table.name, null);
              List<Column> columnsData = new ArrayList<>();
              while (columns.next()) {
                Column column = new Column(
                        columns.getString("COLUMN_NAME").toLowerCase(),
                        columns.getString("TYPE_NAME").toLowerCase());
                columnsData.add(column);
              }
              for (Column c : table.columnNameType) {
                if (!columnsData.contains(c)) {
                  for (Column c2 : columnsData) {
                    if (c.first.equals(c2.first)) {
                      throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" is of the " +
                              "wrong type.");
                    }
                  }
                  throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" doesn't exist.");
                }
              }
            }
            connection.close();
          } catch (Exception e) {
            throw new WrongAnswer("An exception was thrown, while trying to check the database schema - " + e.getMessage());
          }
        }
      
        void checkConnection() {
          try {
            Class.forName("org.postgresql.Driver");
          } catch (ClassNotFoundException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. PostgreSQL JDBC Driver is " +
                    "not found.");
          }
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (SQLException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          if (connection == null) {
            throw new WrongAnswer("Failed to make connection to database");
          }
        }
      
        @DynamicTest(order = 0)
        public CheckResult normalExe21Test() {
      
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, save," +
                    " exit)?\"");
          ArrayList<dbTable> tables = new ArrayList<>(Arrays.asList(
                  new dbTable("ingredients", new ArrayList<>(
                          Arrays.asList(
                                  new Column("ingredient", "varchar"),
                                  new Column("ingredient_id", "int4"),
                                  new Column("meal_id", "int4")
                          )
                  )),
                  new dbTable("meals", new ArrayList<>(
                          Arrays.asList(
                                  new Column("category", "varchar"),
                                  new Column("meal", "varchar"),
                                  new Column("meal_id", "int4")
                          )
                  ))
          ));
          checkTableSchema(tables);
      
          if (!co.input("save", "Unable to save. Plan your meals first."))
            return CheckResult.wrong("Your output should contain \"Unable to save. Plan your meals first.\"");
      
          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");
          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 1)
        public CheckResult normalExe16Test() {
      
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, save," +
                    " exit)?\"");
          ArrayList<dbTable> tables = new ArrayList<>(Arrays.asList(
                  new dbTable("ingredients", new ArrayList<>(
                          Arrays.asList(
                                  new Column("ingredient", "varchar"),
                                  new Column("ingredient_id", "int4"),
                                  new Column("meal_id", "int4")
                          )
                  )),
                  new dbTable("meals", new ArrayList<>(
                          Arrays.asList(
                                  new Column("category", "varchar"),
                                  new Column("meal", "varchar"),
                                  new Column("meal_id", "int4")
                          )
                  ))
          ));
          checkTableSchema(tables);
      
          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");
          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 2)
        CheckResult normalExe17Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("sushi", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("salmon, rice, avocado", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("omelette", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("eggs, milk, cheese", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("breakfast", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("oatmeal", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("oats, milk, banana, peanut butter", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                    "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                    "milk", "banana", "peanut butter"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 3)
        CheckResult normalExe18Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("lunch", "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado",
                    "Name: omelette", "Ingredients:", "eggs", "milk", "cheese"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("breakfast", "Category: breakfast", "Name: oatmeal", "Ingredients:", "oats",
                    "milk", "banana", "peanut butter"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
            if (!co.input("show", "Which category do you want to print (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about the meal category to print: \"(breakfast, " +
                      "lunch, dinner)?\"");
      
            if (!co.input("brunch", "Wrong meal category! Choose from: breakfast, lunch, dinner."))
              return CheckResult.wrong("Wrong output after the input of a category that doesn't exist.");
      
            if (!co.input("dinner", "No meals found."))
              return CheckResult.wrong("Wrong output for a category with no added meals.");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 4)
        CheckResult normalExe19Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - " + e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                      "save, " +
                      "exit)?\"");
      
      
            for (MyMealTestData meal : mealsList) {
              if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
                return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, " +
                        "dinner)?\"");
      
              if (!co.input(meal.mealCategory, "Input the meal's name:"))
                return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
              if (!co.input(meal.mealName, "Input the ingredients:"))
                return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
              if (!co.input(String.join(",", meal.ingredients), "The meal has been added!"))
                return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
              if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
                return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, plan, " +
                        "save, " +
                        "exit)?\"");
      
            }
      
            co.getNextOutput("plan");
            int index = 0;
            for (String day : days) {
              if (!co.inputNext(day))
                return CheckResult.wrong("Your output should contain \"" + day + "\"");
      
              String[] categories = new String[]{"breakfast", "lunch", "dinner"};
              String[][] alphabetic = {
                      new String[]{"english breakfast", "oatmeal", "sandwich", "scrambled eggs"},
                      new String[]{"chicken salad", "omelette", "salad", "sushi"},
                      new String[]{"beef steak", "pizza", "pumpkin soup", "tomato soup"}
              };
              for (int i = 0; i < 3; i++) {
                String category = categories[i];
                if (!co.inputNext(alphabetic[i]))
                  return CheckResult.wrong("Make sure that formatting of your output is similar to the one in the example. " +
                          "Also, your output should contain the meals in alphabetic order.");
      
                if (!co.inputNext("Choose the " + category + " for " + day + " from the list above:"))
                  return CheckResult.wrong("Your output should contain the prompt for the " + category + " meal.");
      
                if (!co.input("nonExistMeal", "This meal doesn’t exist. Choose a meal from the list above."))
                  return CheckResult.wrong("Your output should contain \"This meal doesn’t exist. Choose a meal from the " +
                          "list above.\"");
      
                co.getNextOutput(((MyMealTestData) (Arrays.stream(mealsList).filter(x -> x.mealCategory.equals(category)).toArray()[index % 4])).mealName);
              }
              if (!co.inputNext("Yeah! We planned the meals for " + day + "."))
                return CheckResult.wrong("Your output should contain \"Yeah! We planned the meals for " + day + ".\".");
              index++;
            }
      
            String[] planPrintout = new String[]{"Monday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin " +
                    "soup",
                    "Tuesday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                    "Wednesday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza",
                    "Thursday", "Breakfast: english breakfast", "Lunch: salad", "Dinner: tomato soup",
                    "Friday", "Breakfast: scrambled eggs", "Lunch: sushi", "Dinner: pumpkin soup",
                    "Saturday", "Breakfast: sandwich", "Lunch: chicken salad", "Dinner: beef steak",
                    "Sunday", "Breakfast: oatmeal", "Lunch: omelette", "Dinner: pizza"};
      
            for (String line : planPrintout) {
              if (!co.inputNext(line))
                return CheckResult.wrong("Your output should contain \"" + line + "\".");
            }
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
      
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 5)
        CheckResult normalExe20Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong(
                      "Your program should ask the user about the required action: \"(add, show, plan, save, exit)?\"");
      
            if (!co.input("save", "Input a filename:"))
              return CheckResult.wrong("Your output should contain: \"Input a filename:\"");
      
            if (!co.input("plan.txt", "Saved!"))
              return CheckResult.wrong("Your output should contain: \"Saved!\"");
      
            if (!co.inputNext("What would you like to do (add, show, plan, save, exit)?"))
              return CheckResult.wrong(
                      "Your program should ask the user about the required action: \"(add, show, plan, save, exit)?\"");
      
            File ingredientsFile = new File("plan.txt");
            if (!ingredientsFile.exists())
              return CheckResult.wrong("The ingredient file doesn't exist.");
      
            List<String> ingredientsInPlan = new ArrayList<>(List.of(
                    "avocado x2", "bacon", "banana x2", "beef steak x2", "bread x3", "carrots x2",
                    "cheese x9", "chicken x2", "coconut milk x2", "curry x2", "eggs x5",
                    "flour x2", "ham x2", "lettuce x3", "milk x6", "oats x2", "olives x3",
                    "onion", "orzo", "peanut butter x2", "pumpkin x2", "rice x2", "salami x2",
                    "salmon x2", "sausages", "tomato x6", "tomatoes"));
            Scanner scanner = new Scanner(ingredientsFile);
            while(scanner.hasNext()){
              String line = scanner.nextLine();
              if (!ingredientsInPlan.contains(line))
                return CheckResult.wrong("There is no ingredient \""+line+"\" in plan");
              ingredientsInPlan.remove(line);
            }
            if(!ingredientsInPlan.isEmpty())
              return CheckResult.wrong("Ingredient \""+ingredientsInPlan.get(0)+"\" doesn't exist in file.");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - "+e);
          }
      
          return CheckResult.correct();
        }
      }
      
      
      class CheckOutput {
        private TestedProgram main = new TestedProgram();
        private int position = 0;
        private boolean caseInsensitive = true;
        private boolean trimOutput = true;
        private List<String> arguments = new ArrayList<>();
        private boolean isStarted = false;
        private String lastOutput = "";
      
        private boolean checkOutput(String outputString, String... checkStr) {
          int searchPosition = position;
          for (String cStr : checkStr) {
            String str = caseInsensitive ? cStr.toLowerCase() : cStr;
            int findPosition = outputString.indexOf(str, searchPosition);
            if (findPosition == -1) return false;
            if (!outputString.substring(searchPosition, findPosition).isBlank()) return false;
            searchPosition = findPosition + str.length();
          }
          position = searchPosition;
          return true;
        }
      
        public boolean start(String... checkStr) {
          if (isStarted)
            return false;
          var outputString = main.start(arguments.toArray(new String[]{}));
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          isStarted = true;
          return checkOutput(outputString, checkStr);
        }
      
        public void stop() {
          main.stop();
        }
      
        public boolean input(String input, String... checkStr) {
          if (main.isFinished()) return false;
          String outputString = main.execute(input);
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          position = 0;
          return checkOutput(outputString, checkStr);
        }
      
        public boolean inputNext(String... checkStr) {
          String outputString = lastOutput;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          return checkOutput(outputString, checkStr);
        }
      
        public String getNextOutput(String input) {
          if (main.isFinished()) return "";
          String outputString = main.execute(input);
          lastOutput = outputString;
          position = 0;
          return outputString;
        }
      
        public String getLastOutput() {
          return lastOutput;
        }
      
        public boolean programIsFinished() {
          return main.isFinished();
        }
      
        public void setArguments(String... arguments) {
          this.arguments = Arrays.stream(arguments).toList();
        }
      
        public void setCaseInsensitive(boolean caseInsensitive) {
          this.caseInsensitive = caseInsensitive;
        }
      
        public void setTrimOutput(boolean trimOutput) {
          this.trimOutput = trimOutput;
        }
      }
    learner_created: false
  - name: src/mealplanner/Meal.java
    visible: true
    text: |
      package mealplanner;
      
      import java.util.ArrayList;
      import java.util.List;
      
      public class Meal {
          int mealId;
          String category;
          String meal;
          List<Ingredient> ingredients;
          final static String ONLY_LETTER_REGEX = "[a-zA-Z ]+";
      
          public Meal(int mealId, String category, String meal, String ingredients) {
              this.mealId = mealId;
              this.category = category;
              this.meal = meal;
              this.ingredients = new ArrayList<>();
              for (String ingredient : ingredients.split(",")) {
                  this.ingredients.add(new Ingredient(ingredient.trim()));
              }
          }
      
          public Meal(int mealId, String category, String meal, List<Ingredient> ingredients) {
              this.mealId = mealId;
              this.category = category;
              this.meal = meal;
              this.ingredients = ingredients;
          }
      
          @Override
          public String toString() {
              return String.format("""
                      Name: %s
                      Ingredients:
                      %s""",
                      meal,
                      String.join("\n", ingredients.stream().map(Ingredient::toString).toList()));
          }
      
          /**
           * Validate meal type.
           * Meal type must be breakfast, lunch or dinner.
           * @param category string
           * @return true: valid type otherwise false
           */
          public static boolean validateCategory(String category) {
              final List<String> validCategories = List.of("breakfast", "lunch", "dinner");
              return validCategories.contains(category);
          }
      
          /**
           * Validate meal name.
           * Meal name must be letters only.
           * @param name string
           * @return true: valid name otherwise false
           */
          public static boolean validateName(String name) {
              return name.matches(ONLY_LETTER_REGEX);
          }
      
          /**
           * Validate ingredients.
           * Meal name must be letters only.
           * @param name string
           * @return true: valid name otherwise false
           */
          public static boolean validateIngredients(String ingredients) {
              if (ingredients.isEmpty()) {
                  return false;
              }
              for (String ingredient : ingredients.split(",")) {
                  if (ingredient.trim().isEmpty()) {
                      return false;
                  }
                  if (!ingredient.matches(ONLY_LETTER_REGEX)) {
                      return false;
                  }
              }
              return true;
          }
      }
    learner_created: true
  - name: src/mealplanner/DbManager.java
    visible: true
    text: |
      package mealplanner;
      
      import javax.xml.transform.Result;
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.List;
      
      public class DbManager {
          private Connection connection;
          public DbManager() {
              try {
                  String DB_URL = "jdbc:postgresql:meals_db";
                  String USER = "postgres";
                  String PASS = "1111";
      
                  connection = DriverManager.getConnection(DB_URL, USER, PASS);
                  connection.setAutoCommit(true);
                  migrate();
              } catch (SQLException e) {
                  System.err.println(e.getMessage());
              }
          }
      
          public void migrate() {
              try {
                  Statement statement = connection.createStatement();
                  statement.executeUpdate(Queries.CREATE_TBL_MEALS);
                  statement.executeUpdate(Queries.CREATE_TBL_INGREDIENTS);
                  statement.executeUpdate(Queries.CREATE_TBL_PLANS);
                  statement.close();
              } catch (SQLException e) {
                  System.err.println(e.getMessage());
              }
          }
      
          public List<Meal> getMeals() {
              List<Meal> meals = new ArrayList<>();
              try {
                  Statement getMealStm = connection.createStatement();
                  ResultSet mealRS = getMealStm.executeQuery(Queries.SELECT_ALL_MEALS);
                  meals = getMealFromResultSet(mealRS);
              } catch (SQLException e) {
                  System.err.println(e.getMessage());
              }
              return meals;
          }
      
          public List<Meal> getMeal(String category, boolean orderByName) {
              List<Meal> meals = new ArrayList<>();
              try {
                  String sql = orderByName ? Queries.SELECT_MEAL_BY_CATEGORY_ORDER_BY_NAME : Queries.SELECT_MEAL_BY_CATEGORY;
                  PreparedStatement getMealStm = connection.prepareStatement(sql);
                  getMealStm.setString(1, category);
                  ResultSet mealRS = getMealStm.executeQuery();
                  meals = getMealFromResultSet(mealRS);
              } catch (SQLException e) {
                  System.err.println(e.getMessage());
              }
              return meals;
          }
      
          List<Meal> getMealFromResultSet(ResultSet rs) throws SQLException {
              List<Meal> result = new ArrayList<>();
              while (rs.next()) {
                  int mealId = rs.getInt("meal_id");
                  String category = rs.getString("category");
                  String name = rs.getString("meal");
                  PreparedStatement getIngredientsStm = connection.prepareStatement(Queries.SELECT_INGREDIENTS_BY_MEAL);
                  getIngredientsStm.setInt(1, mealId);
                  ResultSet ingredientsRs = getIngredientsStm.executeQuery();
                  List<Ingredient> ingredients = new ArrayList<>();
                  while (ingredientsRs.next()) {
                      int ingredientId = ingredientsRs.getInt("ingredient_id");
                      String ingredient = ingredientsRs.getString("ingredient");
                      ingredients.add(new Ingredient(ingredientId, ingredient, mealId));
                  }
                  Meal meal = new Meal(mealId, category, name, ingredients);
                  result.add(meal);
              }
              return result;
          }
      
          public void addMeal(Meal meal) {
              try {
                  PreparedStatement statement = connection.prepareStatement(Queries.INSERT_MEAL);
                  statement.setInt(1, meal.mealId);
                  statement.setString(2, meal.category);
                  statement.setString(3, meal.meal);
                  statement.execute();
                  statement = connection.prepareStatement(Queries.INSERT_INGREDIENTS);
                  statement.setInt(2, meal.mealId);
                  for (Ingredient ingredient : meal.ingredients) {
                      statement.setString(1, ingredient.ingredient);
                      statement.execute();
                  }
              } catch (SQLException e) {
                  System.err.println(e.getMessage());
              }
          }
      
          public void savePlan(List<Plan> plans) {
              try {
                  PreparedStatement statement = connection.prepareStatement(Queries.INSERT_PLAN);
                  for (Plan plan : plans) {
                      statement.setInt(1, plan.mealOption.mealOptionId);
                      statement.setInt(2, plan.mealCategory.mealCategoryId);
                      statement.setInt(3, plan.meal.mealId);
                      statement.execute();
                  }
              } catch (SQLException e) {
                  System.err.println(e.getMessage());
              }
          }
      }
    learner_created: true
  - name: src/mealplanner/Queries.java
    visible: true
    text: |
      package mealplanner;
      
      public class Queries {
          public static String CREATE_TBL_MEALS = """
                  CREATE TABLE IF NOT EXISTS meals (
                    meal_id INT PRIMARY KEY,
                    category VARCHAR(255),
                    meal VARCHAR(255)
                  );""";
          public static String CREATE_TBL_INGREDIENTS = """
                  CREATE TABLE IF NOT EXISTS ingredients (
                    ingredient_id INT,
                    ingredient VARCHAR(255),
                    meal_id INT
                  );""";
          public static String CREATE_TBL_PLANS = """
                  CREATE TABLE IF NOT EXISTS plan (
                    meal_option INT,
                    meal_category INT,
                    meal_id INT
                  );""";
      
          public static String SELECT_ALL_MEALS = "SELECT * FROM meals ORDER BY meal_id;";
          public static String SELECT_MEAL_BY_CATEGORY = "SELECT * FROM meals WHERE category = ? ORDER BY meal_id;";
          public static String SELECT_MEAL_BY_CATEGORY_ORDER_BY_NAME = "SELECT * FROM meals WHERE category = ? ORDER BY meal;";
          public static String SELECT_INGREDIENTS_BY_MEAL = "SELECT * FROM ingredients WHERE meal_id = ?;";
      
          public static String INSERT_MEAL = "INSERT INTO meals(meal_id, category, meal) VALUES (?, ?, ?);";
          public static String INSERT_INGREDIENTS = "INSERT INTO ingredients(ingredient_id, ingredient, meal_id) VALUES (0, ?, ?);";
          public static String INSERT_PLAN = "INSERT INTO plan(meal_option, meal_category, meal_id) VALUES (?, ?, ?);";
      }
    learner_created: true
  - name: src/mealplanner/Ingredient.java
    visible: true
    text: |
      package mealplanner;
      
      public class Ingredient {
          int ingredientId;
          String ingredient;
          int mealId;
      
          public Ingredient(String ingredient) {
              this.ingredient = ingredient;
          }
      
          public Ingredient(int ingredientId, String ingredient, int mealId) {
              this.ingredientId = ingredientId;
              this.ingredient = ingredient;
              this.mealId = mealId;
          }
      
          @Override
          public String toString() {
              return ingredient;
          }
      }
    learner_created: true
  - name: src/mealplanner/Plan.java
    visible: true
    text: |
      package mealplanner;
      
      import java.time.DayOfWeek;
      
      public class Plan implements Comparable<Plan> {
          enum MealOption {
              Monday(1), Tuesday(2), Wednesday(3), Thursday(4), Friday(5), Saturday(6), Sunday(7);
      
              final int mealOptionId;
              MealOption(int id) {
                  mealOptionId = id;
              }
          }
          enum MealCategory {
              breakfast(1), lunch(2), dinner(3);
      
              final int mealCategoryId;
              MealCategory(int id) {
                  mealCategoryId = id;
              }
          }
      
          MealOption mealOption;
          MealCategory mealCategory;
          Meal meal;
      
          @Override
          public int compareTo(Plan o) {
              return this.mealCategory.compareTo(o.mealCategory);
          }
      }
    learner_created: true
  - name: plan.txt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/25576#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 16 Apr 2024 04:44:27 UTC"
record: -1
